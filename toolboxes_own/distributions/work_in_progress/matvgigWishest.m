function [eparam, tstats, logL, optimoutput] = ...
    matvgigWishest(X, x0, varargin)
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here

[p,~,N] = size(X);
p_ = p*(p+1)/2;
if ~isempty(varargin) && strcmp(varargin{1},'EstimationStrategy:MethodOfMoments')
    %% Optimization
    obj_fun = @(df) obj_fun_targeting(df,X);
    
    if isempty(x0)
        x0 = [2*p;1;1;1];
    end

    lb = [ p-1; -inf; 0; 0];

    [eparam,optimoutput] = ...
        my_fmincon(...
            obj_fun,...
            x0,...
            [],[],[],[],lb,[],[],...
            varargin{2:end}...
        );
    %% tstats
    %[VCV,A,B,scores,hess,gross_scores] = robustvcv(fun, eparam, 3);
    [VCV,scores,gross_scores] = vcv(obj_fun, eparam);

    tstats = eparam./sqrt(diag(VCV));

    tstats = struct(...
        'df_n', tstats(1), ...           
        'lambda_', tstats(2), ...     
        'xi_', tstats(3), ...  
        'psi_', tstats(4), ...  
        'all', tstats ...
    );
    %% nLogL, logLcontr and eparam
    [nLogL, logLcontr, ~, ~, eparam] = obj_fun(eparam);

    aic = 2*nLogL + 2*(p_ + 4);
    bic = 2*nLogL + log(N)*(p_ + 4);
    logL = struct(...
        'logL', -nLogL, ...
        'logLcontr', logLcontr, ...
        'bic', bic, ...
        'aic', aic ...
    );
else
    %% Optimization
    obj_fun = @(param) matvgigWishlike([],[],[],[],[],X,param);
   
    if isempty(x0)
        x0 = [vechchol(mean(X,3)/p);p;1;1;1];
    end

    lb = [ -inf(p_,1); p-1; -inf; 0; 0];

    [eparam,optimoutput] = ...
        my_fmincon(...
            obj_fun,...
            x0,...
            [],[],[],[],lb,[],[],...
            varargin{:}...
        );
    %% tstats
    %[VCV,A,B,scores,hess,gross_scores] = robustvcv(fun, eparam, 3);
    [VCV,scores,gross_scores] = vcv(obj_fun, eparam);

    tstats = eparam./sqrt(diag(VCV));

    tstats = struct(...
        'Sigma_', tstats(1:p_), ...
        'df_n', tstats(p_ + 1), ...           
        'lambda_', tstats(p_ + 2), ...     
        'xi_', tstats(p_ + 3), ...  
        'psi_', tstats(p_ + 4), ...  
        'all', tstats ...
    );
    %% nLogL, logLcontr and eparam
    [nLogL, logLcontr, ~, ~, eparam] = obj_fun(eparam);

    aic = 2*nLogL + 2*(p_ + 4);
    bic = 2*nLogL + log(N)*(p_ + 4);
    logL = struct(...
        'logL', -nLogL, ...
        'logLcontr', logLcontr, ...
        'bic', bic, ...
        'aic', aic ...
    );
end

end

function [ nLogL, logLcontr, score, hessian, param ] = obj_fun_targeting(df, X) 

    targ_c = 1/df(1)/sqrt(df(3)/df(4))/besselk( df(2) + 1, sqrt(df(3)*df(4)) )*besselk( df(2), sqrt(df(3)*df(4)) );
    if isinf(targ_c)
        nLogL = inf;
        return
    end
    
    Sigma_ = mean(X,3)*targ_c;
    try
        chol(Sigma_);
    catch
        nLogL = inf;
        return
    end
    
    [ nLogL, logLcontr, score, hessian, param ] = matvgigWishlike( ...
        Sigma_, ...
        df(1), ...
        df(2), ...
        df(3), ...
        df(4), ...
        X ...
    );

end

