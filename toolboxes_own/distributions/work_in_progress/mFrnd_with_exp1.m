function [ mF_rnd ] = mFrnd_with_exp1( Sigma_, df_1, df_2 )
%This is experimental

%% Input Checking
if numel(size(Sigma_)) ~= 2 && numel(size(Sigma_)) ~= 3
    error('Sigma_ dimensions are not valid')
end

if size(Sigma_,1) ~= size(Sigma_,2)
    error('Omega_ are not a quadratic matrices')
end

if Sigma_ ~= permute(Sigma_, [2,1,3])
    error('Sigma Matrices are not symmetric')
end

[p,~,N] = size(Sigma_);

% for ii=1:N
%     try
%         chol(Sigma_(:,:,ii));
%     catch
%         error('Sigma Matrices are not positive definite')
%     end
% end
% 
% if any(df_2 == inf) || any(df_2 < p)
%     error('df_2 must be K? < df_2 < inf')
% end

if any(mod(df_1,1) ~= 0)
    warning('Rounded df_1')
    df_1 = round(df_1);
end
%% Random Draws
mF_rnd = NaN(p,p,N);

for ii=1:N
    sqrtm_Sigma = sqrtm(Sigma_(:,:,ii));
    
    X = reshape(mvnrnd(zeros(p*df_1(ii),1), eye(p*df_1(ii))), p, df_1(ii));
    V = X*X'; %V could also be generated by wishrnd.
    V = V*exprnd(1);
    sqrtV = sqrtm(V); %It has to be sym sqrtm of V, thus can't just take X.
    
    invT = iwishrnd(eye(p), df_2(ii));
    
    mF_ = sqrtm_Sigma*sqrtV*invT*sqrtV*sqrtm_Sigma;
    
    if max(max((abs((mF_ - mF_')./mF_)))) < 1e-08
        mF_rnd(:,:,ii) = (mF_ + mF_')/2;
%         warning([num2str(ii) ' is not exactly symmetric'])
    else
        error(['Not symmetric matrix produced in mF_rnd MC rep ' num2str(ii)])
    end
    if any(isnan(mF_rnd(:,:,ii)))
        error(['NaNs produced in mF_rnd MC rep ' num2str(ii)])
    end
end
end
