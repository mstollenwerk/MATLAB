function [eparam, tstats, logL, optimoutput] = matvFest(X, x0, varargin)
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here

%% Input Checking
% Will be added later
[p,~,N] = size(X);
p_ = p*(p+1)/2;
if ~isempty(varargin) && strcmp(varargin{1},'EstimationStrategy:MethodOfMoments')
    %% Optimization
    obj_fun = @(df) matvFlike( mean(X,3)*(df(1)-p-1)/df(2)/df(1),df(1),df(2),X);

    if isempty(x0)
        x0 = [2*p; 2*p];
    end

    [eparam,optimoutput] = ...
        my_fmincon(...
            obj_fun,...
            x0,...
            [],[],[],[],[p+1;p-1],[],[],...
            varargin{2:end}...
        );
    %% tstats
    %[VCV,A,B,scores,hess,gross_scores] = robustvcv(fun, eparam, 3);
    [VCV,scores,gross_scores] = vcv(obj_fun, eparam);

    tstats = eparam./sqrt(diag(VCV));

    tstats = struct(...
        'Sigma_', NaN(p_,1), ...
        'df_1', tstats(1), ...           
        'df_2', tstats(2), ...     
        'all', [NaN(p_,1); tstats] ...
    );
    %% nLogL, logLcontr and eparam  
    [nLogL, logLcontr, ~, ~, eparam] = obj_fun(eparam);

    aic = 2*nLogL + 2*(p_ + 2);
    bic = 2*nLogL + log(N)*(p_ + 2);
    logL = struct(...
        'logL', -nLogL, ...
        'logLcontr', logLcontr, ...
        'bic', bic, ...
        'aic', aic ...
    );
else
    %% Optimization
    obj_fun = @(param) matvFlike([],[],[],X,param);

    if isempty(x0)
        x0 = [vechchol( mean(X,3)*(p-1)/(4*p) ); 2*p; 2*p];
    end

    [eparam,optimoutput] = ...
        my_fmincon(...
            obj_fun,...
            x0,...
            [],[],[],[],[-inf(p_,1);p+1;p-1],[],[],...
            varargin{:}...
        );
    %% tstats
    %[VCV,A,B,scores,hess,gross_scores] = robustvcv(fun, eparam, 3);
    [VCV,scores,gross_scores] = vcv(obj_fun, eparam);

    tstats = eparam./sqrt(diag(VCV));

    tstats = struct(...
        'Sigma_', tstats(1:p_), ...
        'df_1', tstats(p_ + 1), ...           
        'df_2', tstats(p_ + 2), ...     
        'all', tstats ...
    );
    %% nLogL, logLcontr and eparam  
    [nLogL, logLcontr, ~, ~, eparam] = obj_fun(eparam);

    aic = 2*nLogL + 2*(p_ + 2);
    bic = 2*nLogL + log(N)*(p_ + 2);
    logL = struct(...
        'logL', -nLogL, ...
        'logLcontr', logLcontr, ...
        'bic', bic, ...
        'aic', aic ...
    );
end
end