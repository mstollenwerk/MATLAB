function [eparam, tstats, logL, optimoutput] = matvF1est(X, x0, varargin)
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here
warning('This distribution is only defined for data<Sigma.')
%% Input Checking
% Will be added later
[p,~,N] = size(X);
p_ = p*(p+1)/2;
%% Optimization
if isempty(x0)
    x0 = [vechchol( mean(X,3)*1e5 ); 2*p; 2*p];
end

[eparam,optimoutput] = ...
    my_fmincon(...
        @(param) matvF1like([],[],[],X,param),...
        x0,...
        [],[],[],[],[-inf(p_,1);p-1;0],[],[],...
        varargin{:}...
    );
%% tstats
%[VCV,A,B,scores,hess,gross_scores] = robustvcv(fun, eparam, 3);
[VCV,scores,gross_scores] = ...
    vcv(@(param) matvF1like([],[],[],X,param), eparam);

tstats = eparam./sqrt(diag(VCV));

tstats = struct(...
    'Sigma_', tstats(1:p_), ...
    'df_1', tstats(p_ + 1), ...           
    'df_2', tstats(p_ + 2), ...     
    'all', tstats ...
);
%% nLogL, logLcontr and eparam  
[nLogL, logLcontr, ~, ~, eparam] = matvF1like([],[],[],X,eparam);

aic = 2*nLogL + 2*numel(x0);
bic = 2*nLogL + log(N)*numel(x0);
logL = struct(...
    'logL', -nLogL, ...
    'logLcontr', logLcontr, ...
    'bic', bic, ...
    'aic', aic ...
);
end

