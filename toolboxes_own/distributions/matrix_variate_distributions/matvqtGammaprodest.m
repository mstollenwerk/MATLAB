function [eparam, tstats, logL, optimoutput] = matvqtGammaprodest(X, x0, varargin)
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here

narginchk(2,inf);
[p,~,N] = size(X);
p_ = p*(p+1)/2;
%% Optimization
if isempty(x0)
    x0 = [vech(chol(mean(X,3)/2/p,'lower'));2*p;5;2];
end

lb = [ -inf(p_,1); p-1; 0; 0];

[eparam,optimoutput] = ...
    my_fmincon( ...
        @(param) matvqtGammaprodlike( [], [], [], [], X, param ), ...
        x0, ...
        [],[],[],[],lb,[],[],varargin{:} ...
    );
%% tstats
%[VCV,A,B,scores,hess,gross_scores] = robustvcv(fun, eparam, 3);
[VCV,scores,gross_scores] = ...
    vcv(@(param) matvqtGammaprodlike( [], [], [], [], X, param ), eparam);

tstats = eparam./sqrt(diag(VCV));

tstats = struct(...
    'Sigma_', tstats(1:p_), ...
    'df_n', tstats(p_ + 1), ...           
    'df_t', tstats(p_ + 2), ...     
    'lambda', tstats(p_ + 3), ...  
    'all', tstats ...
);
%% nLogL, logLcontr and eparam
[nLogL, logLcontr, ~, ~, eparam ] = matvqtGammaprodlike( [], [], [], [], X, eparam );

aic = 2*nLogL + 2*numel(x0);
bic = 2*nLogL + log(N)*numel(x0);
logL = struct(...
    'logL', -nLogL, ...
    'logLcontr', logLcontr, ...
    'bic', bic, ...
    'aic', aic ...
);
end

